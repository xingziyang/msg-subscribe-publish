<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
           http://www.springframework.org/schema/aop   
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/jms 
		   http://www.springframework.org/schema/jms/spring-jms-3.2.xsd"
	default-autowire="byName" default-lazy-init="false">

	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<!-- ActiveMQ服务地址 -->
        <property name="brokerURL" value="${mq.brokerURL}" />
        <property name="userName" value="${mq.userName}"></property>
        <property name="password" value="${mq.password}"></property> 
        <property name="sendTimeout" value="1000"></property>
	    <property name="closeTimeout" value="1000"></property>
	    <property name="useAsyncSend" value="true"></property>
	    <property name="clientIDPrefix" value="www"></property>
	</bean>

    <!-- 
    	ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory
    	可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗。
    	要依赖于 activemq-pool包
     -->
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="targetConnectionFactory" />
		<property name="maxConnections" value="${mq.pool.maxConnections}" />
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory1" class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
		<property name="clientId" value="clientId_001"/>
	</bean>
	<bean id="connectionFactory2" class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
		<property name="clientId" value="clientId_002"/>
	</bean>
	<bean id="connectionFactory3" class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
		<property name="clientId" value="clientId_003"/>
	</bean>
	
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<!-- 发送消息的目的地 -->
    <bean id="Topic-A" class="org.apache.activemq.command.ActiveMQTopic">
        <!-- 设置消息队列的名字 -->
        <constructor-arg index="0" value="${topic1}" />
    </bean>
    <!-- 发送消息的目的地 -->
    <bean id="Topic-B" class="org.apache.activemq.command.ActiveMQTopic">
        <!-- 设置消息队列的名字 -->
        <constructor-arg index="0" value="${topic2}" />
    </bean>
	
	<bean id="topicListenerA" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg ref="topicConsumerA" />
		<property name="defaultListenerMethod" value="receive" />
	</bean>

	<bean id="topicListenerB" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg ref="topicConsumerB" />
		<property name="defaultListenerMethod" value="receive" />
	</bean>
	
	<bean id="topicListenerC" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg ref="topicConsumerC" />
		<property name="defaultListenerMethod" value="receive" />
	</bean>
	
	<bean id="topicListenerContainerA" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory1" />
		<property name="concurrentConsumers" value="1" />
		<property name="destination" ref="Topic-A" />
		<property name="messageListener" ref="topicListenerA" />
		<property name="subscriptionDurable" value="true"/>
	</bean>
	
	<bean id="topicListenerContainerB" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory2" />
		<property name="concurrentConsumers" value="1" />
		<property name="destination" ref="Topic-B" />
		<property name="messageListener" ref="topicListenerB" />
		<property name="subscriptionDurable" value="true"/>
	</bean>
	
	<bean id="topicListenerContainerC" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory3" />
		<property name="concurrentConsumers" value="1" />
		<property name="destination" ref="Topic-A" />
		<property name="messageListener" ref="topicListenerA" />
		<property name="subscriptionDurable" value="true"/>
	</bean>
	
	<!-- 简化配置 -->
    <!-- <jms:listener-container connection-factory="connectionFactory1" concurrency="1" client-id="clientId_001" destination-type="durableTopic">
       <jms:listener destination="Topic-A" ref="topicListenerA" />
    </jms:listener-container>
    <jms:listener-container connection-factory="connectionFactory2" concurrency="1" client-id="clientId_002" destination-type="durableTopic">
       <jms:listener destination="Topic-B" ref="topicListenerB" />
    </jms:listener-container>
    <jms:listener-container connection-factory="connectionFactory3" concurrency="1" client-id="clientId_003" destination-type="durableTopic">
       <jms:listener destination="Topic-A" ref="topicListenerC" />
    </jms:listener-container> -->
	
	<bean id="mailBiz" class="org.msg.subscribe.biz.MailBiz"></bean>
	<!-- consumer for topic -->
	<bean id="topicConsumerA" class="org.msg.subscribe.listener.ConsumerMessageListener1">
		<property name="mailBiz" ref="mailBiz" />
	</bean>
	<bean id="topicConsumerB" class="org.msg.subscribe.listener.ConsumerMessageListener2">
		<property name="mailBiz" ref="mailBiz" />
	</bean>
	<bean id="topicConsumerC" class="org.msg.subscribe.listener.ConsumerMessageListener3">
		<property name="mailBiz" ref="mailBiz" />
	</bean>

</beans>